{"ast":null,"code":"// Utilities\nimport { computed, ref } from 'vue';\nimport { getCurrentInstance, toKebabCase } from \"../util/index.mjs\"; // Types\n\n// Composables\nexport function useProxiedModel(props, prop, defaultValue) {\n  let transformIn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : v => v;\n  let transformOut = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : v => v;\n  const vm = getCurrentInstance('useProxiedModel');\n  const propIsDefined = computed(() => {\n    var _vm$vnode$props, _vm$vnode$props2;\n    return !!(typeof props[prop] !== 'undefined' && (vm != null && (_vm$vnode$props = vm.vnode.props) != null && _vm$vnode$props.hasOwnProperty(prop) || vm != null && (_vm$vnode$props2 = vm.vnode.props) != null && _vm$vnode$props2.hasOwnProperty(toKebabCase(prop))));\n  });\n  const internal = ref(transformIn(props[prop]));\n  return computed({\n    get() {\n      if (propIsDefined.value) return transformIn(props[prop]);else return internal.value;\n    },\n    set(newValue) {\n      if ((propIsDefined.value ? transformIn(props[prop]) : internal.value) === newValue) {\n        return;\n      }\n      internal.value = newValue;\n      vm == null ? void 0 : vm.emit(`update:${prop}`, transformOut(newValue));\n    }\n  });\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,QAAT,EAAmBC,GAAnB,QAA8B,KAA9B;SACSC,kB,EAAoBC,W,6BAE7B;;AAGA;AACA,OAAO,SAASC,eAATA,CAKLC,KALK,EAMLC,IANK,EAOLC,YAPK,EAUL;EAAA,IAFAC,WAEA,uEAF+CC,CAAD,IAAYA,CAE1D;EAAA,IADAC,YACA,uEAD+CD,CAAD,IAAYA,CAC1D;EACA,MAAME,EAAE,GAAGT,kBAAkB,CAAC,iBAAD,CAA7B;EAEA,MAAMU,aAAa,GAAGZ,QAAQ,CAAC,MAAM;IAAA;IACnC,OAAO,CAAC,EACN,OAAOK,KAAK,CAACC,IAAD,CAAZ,KAAuB,WAAvB,KACCK,EAAE,QAAF,yBAAE,CAAEE,KAAJ,CAAUR,KAAV,6BAAiBS,cAAjB,CAAgCR,IAAhC,KAAyCK,EAAzC,gCAAyCA,EAAE,CAAEE,KAAJ,CAAUR,KAAnD,aAAyCU,iBAAiBD,cAAjB,CAAgCX,WAAW,CAACG,IAAD,CAA3C,CAD1C,CADM,CAAR;EAID,CAL6B,CAA9B;EAOA,MAAMU,QAAQ,GAAGf,GAAG,CAACO,WAAW,CAACH,KAAK,CAACC,IAAD,CAAN,CAAZ,CAApB;EAEA,OAAON,QAAQ,CAAgD;IAC7DiB,GAAGA,GAAS;MACV,IAAIL,aAAa,CAACM,KAAlB,EAAyB,OAAOV,WAAW,CAACH,KAAK,CAACC,IAAD,CAAN,CAAlB,CAAzB,KACK,OAAOU,QAAQ,CAACE,KAAhB;IACN,CAJ4D;IAK7DC,GAAGA,CAAEC,QAAF,EAAY;MACb,IAAI,CAACR,aAAa,CAACM,KAAd,GAAsBV,WAAW,CAACH,KAAK,CAACC,IAAD,CAAN,CAAjC,GAAiDU,QAAQ,CAACE,KAA3D,MAAsEE,QAA1E,EAAoF;QAClF;MACD;MACDJ,QAAQ,CAACE,KAAT,GAAiBE,QAAjB;MACAT,EAAE,QAAF,cAAE,CAAEU,IAAJ,CAAU,UAASf,IAAK,EAAxB,EAA2BI,YAAY,CAACU,QAAD,CAAvC;IACD;EAX4D,CAAhD,CAAf;AAaD","names":["computed","ref","getCurrentInstance","toKebabCase","useProxiedModel","props","prop","defaultValue","transformIn","v","transformOut","vm","propIsDefined","vnode","hasOwnProperty","_vm$vnode$props2","internal","get","value","set","newValue","emit"],"sources":["../../src/composables/proxiedModel.ts"],"sourcesContent":["// Utilities\nimport { computed, ref } from 'vue'\nimport { getCurrentInstance, toKebabCase } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\n\n// Composables\nexport function useProxiedModel<\n  Props extends object & { [key in Prop as `onUpdate:${Prop}`]: ((val: any) => void) | undefined },\n  Prop extends Extract<keyof Props, string>,\n  Inner = Props[Prop],\n> (\n  props: Props,\n  prop: Prop,\n  defaultValue?: Props[Prop],\n  transformIn: (value?: Props[Prop]) => Inner = (v: any) => v,\n  transformOut: (value: Inner) => Props[Prop] = (v: any) => v,\n) {\n  const vm = getCurrentInstance('useProxiedModel')\n\n  const propIsDefined = computed(() => {\n    return !!(\n      typeof props[prop] !== 'undefined' &&\n      (vm?.vnode.props?.hasOwnProperty(prop) || vm?.vnode.props?.hasOwnProperty(toKebabCase(prop)))\n    )\n  })\n\n  const internal = ref(transformIn(props[prop])) as Ref<Inner>\n\n  return computed<Inner extends any[] ? Readonly<Inner> : Inner>({\n    get (): any {\n      if (propIsDefined.value) return transformIn(props[prop])\n      else return internal.value\n    },\n    set (newValue) {\n      if ((propIsDefined.value ? transformIn(props[prop]) : internal.value) === newValue) {\n        return\n      }\n      internal.value = newValue\n      vm?.emit(`update:${prop}`, transformOut(newValue))\n    },\n  })\n}\n"]},"metadata":{},"sourceType":"module"}