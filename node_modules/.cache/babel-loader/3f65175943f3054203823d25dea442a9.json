{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport { createTextVNode as _createTextVNode, mergeProps as _mergeProps, createVNode as _createVNode, Fragment as _Fragment } from \"vue\";\n// Styles\nimport \"./VSelect.css\"; // Components\n\nimport { VDialogTransition } from \"../transitions/index.mjs\";\nimport { VCheckboxBtn } from \"../VCheckbox/index.mjs\";\nimport { VChip } from \"../VChip/index.mjs\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VList, VListItem } from \"../VList/index.mjs\";\nimport { VMenu } from \"../VMenu/index.mjs\";\nimport { VTextField } from \"../VTextField/index.mjs\"; // Composables\n\nimport { makeItemsProps, useItems } from \"../../composables/items.mjs\";\nimport { makeTransitionProps } from \"../../composables/transition.mjs\";\nimport { useForwardRef } from \"../../composables/forwardRef.mjs\";\nimport { useLocale } from \"../../composables/locale.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { IconValue } from \"../../composables/icons.mjs\"; // Utility\n\nimport { computed, mergeProps, ref } from 'vue';\nimport { genericComponent, propsFactory, useRender, wrapInArray } from \"../../util/index.mjs\"; // Types\n\nexport const makeSelectProps = propsFactory({\n  chips: Boolean,\n  closableChips: Boolean,\n  eager: Boolean,\n  hideNoData: Boolean,\n  hideSelected: Boolean,\n  menu: Boolean,\n  menuIcon: {\n    type: IconValue,\n    default: '$dropdown'\n  },\n  menuProps: {\n    type: Object\n  },\n  modelValue: {\n    type: null,\n    default: () => []\n  },\n  multiple: Boolean,\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText'\n  },\n  openOnClear: Boolean,\n  ...makeItemsProps({\n    itemChildren: false\n  })\n}, 'select');\nexport const VSelect = genericComponent()({\n  name: 'VSelect',\n  props: {\n    ...makeSelectProps(),\n    ...makeTransitionProps({\n      transition: {\n        component: VDialogTransition\n      }\n    })\n  },\n  emits: {\n    'update:modelValue': val => true,\n    'update:menu': val => true\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      t\n    } = useLocale();\n    const vTextFieldRef = ref();\n    const menu = useProxiedModel(props, 'menu');\n    const {\n      items,\n      transformIn,\n      transformOut\n    } = useItems(props);\n    const model = useProxiedModel(props, 'modelValue', [], v => transformIn(wrapInArray(v)), v => {\n      var _transformed$;\n      const transformed = transformOut(v);\n      return props.multiple ? transformed : (_transformed$ = transformed[0]) != null ? _transformed$ : null;\n    });\n    const selections = computed(() => {\n      return model.value.map(v => {\n        return items.value.find(item => item.value === v.value) || v;\n      });\n    });\n    const selected = computed(() => selections.value.map(selection => selection.props.value));\n    function onClear(e) {\n      model.value = [];\n      if (props.openOnClear) {\n        menu.value = true;\n      }\n    }\n    function onClickControl() {\n      if (props.hideNoData && !items.value.length) return;\n      menu.value = true;\n    }\n    function onKeydown(e) {\n      if (['Enter', 'ArrowDown', ' '].includes(e.key)) {\n        menu.value = true;\n      }\n      if (['Escape', 'Tab'].includes(e.key)) {\n        menu.value = false;\n      }\n    }\n    function select(item) {\n      if (props.multiple) {\n        const index = selected.value.findIndex(selection => selection === item.value);\n        if (index === -1) {\n          model.value = [...model.value, item];\n        } else {\n          const value = [...model.value];\n          value.splice(index, 1);\n          model.value = value;\n        }\n      } else {\n        model.value = [item];\n        menu.value = false;\n      }\n    }\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip);\n      return _createVNode(VTextField, {\n        \"ref\": vTextFieldRef,\n        \"modelValue\": model.value.map(v => v.props.value).join(', '),\n        \"onUpdate:modelValue\": v => {\n          if (v == null) model.value = [];\n        },\n        \"validationValue\": props.modelValue,\n        \"class\": ['v-select', {\n          'v-select--active-menu': menu.value,\n          'v-select--chips': !!props.chips,\n          [`v-select--${props.multiple ? 'multiple' : 'single'}`]: true\n        }],\n        \"appendInnerIcon\": props.menuIcon,\n        \"readonly\": true,\n        \"onClick:clear\": onClear,\n        \"onClick:input\": onClickControl,\n        \"onClick:control\": onClickControl,\n        \"onBlur\": () => menu.value = false,\n        \"onKeydown\": onKeydown\n      }, {\n        ...slots,\n        default: () => {\n          var _slots$noData, _slots$noData2;\n          return _createVNode(_Fragment, null, [_createVNode(VMenu, _mergeProps({\n            \"modelValue\": menu.value,\n            \"onUpdate:modelValue\": $event => menu.value = $event,\n            \"activator\": \"parent\",\n            \"contentClass\": \"v-select__content\",\n            \"eager\": props.eager,\n            \"openOnClick\": false,\n            \"closeOnContentClick\": false,\n            \"transition\": props.transition\n          }, props.menuProps), {\n            default: () => [_createVNode(VList, {\n              \"selected\": selected.value,\n              \"selectStrategy\": props.multiple ? 'independent' : 'single-independent',\n              \"onMousedown\": e => e.preventDefault()\n            }, {\n              default: () => [!items.value.length && !props.hideNoData && ((_slots$noData = (_slots$noData2 = slots['no-data']) == null ? void 0 : _slots$noData2.call(slots)) != null ? _slots$noData : _createVNode(VListItem, {\n                \"title\": t(props.noDataText)\n              }, null)), items.value.map((item, index) => {\n                var _slots$item, _slots$item2;\n                return (_slots$item = (_slots$item2 = slots.item) == null ? void 0 : _slots$item2.call(slots, {\n                  item,\n                  index,\n                  props: mergeProps(item.props, {\n                    onClick: () => select(item)\n                  })\n                })) != null ? _slots$item : _createVNode(VListItem, _mergeProps({\n                  \"key\": index\n                }, item.props, {\n                  \"onClick\": () => select(item)\n                }), {\n                  prepend: _ref2 => {\n                    let {\n                      isSelected\n                    } = _ref2;\n                    return props.multiple ? _createVNode(VCheckboxBtn, {\n                      \"modelValue\": isSelected,\n                      \"ripple\": false\n                    }, null) : undefined;\n                  }\n                });\n              })]\n            })]\n          }), selections.value.map((item, index) => {\n            function onChipClose(e) {\n              e.stopPropagation();\n              e.preventDefault();\n              select(item);\n            }\n            const slotProps = {\n              'onClick:close': onChipClose,\n              modelValue: true\n            };\n            return _createVNode(\"div\", {\n              \"key\": index,\n              \"class\": \"v-select__selection\"\n            }, [hasChips ? _createVNode(VDefaultsProvider, {\n              \"defaults\": {\n                VChip: {\n                  closable: props.closableChips,\n                  size: 'small',\n                  text: item.title\n                }\n              }\n            }, {\n              default: () => [slots.chip ? slots.chip({\n                item,\n                index,\n                props: slotProps\n              }) : _createVNode(VChip, slotProps, null)]\n            }) : slots.selection ? slots.selection({\n              item,\n              index\n            }) : _createVNode(\"span\", {\n              \"class\": \"v-select__selection-text\"\n            }, [item.title, props.multiple && index < selections.value.length - 1 && _createVNode(\"span\", {\n              \"class\": \"v-select__selection-comma\"\n            }, [_createTextVNode(\",\")])])]);\n          })]);\n        }\n      });\n    });\n    return useForwardRef({\n      menu,\n      select\n    }, vTextFieldRef);\n  }\n});","map":{"version":3,"mappings":"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","names":["VDialogTransition","VCheckboxBtn","VChip","VDefaultsProvider","VList","VListItem","VMenu","VTextField","makeItemsProps","useItems","makeTransitionProps","useForwardRef","useLocale","useProxiedModel","IconValue","computed","mergeProps","ref","genericComponent","propsFactory","useRender","wrapInArray","makeSelectProps","chips","Boolean","closableChips","eager","hideNoData","hideSelected","menu","menuIcon","type","default","menuProps","Object","modelValue","multiple","noDataText","String","openOnClear","itemChildren","VSelect","name","props","transition","component","emits","val","setup","slots","t","vTextFieldRef","items","transformIn","transformOut","model","v","transformed","selections","value","map","find","item","selected","selection","onClear","e","onClickControl","length","onKeydown","includes","key","select","index","findIndex","splice","hasChips","chip","join","onBlur","preventDefault","_slots$noData2","_slots$item2","onClick","prepend","_ref2","isSelected","undefined","onChipClose","stopPropagation","slotProps","closable","size","text","title"],"sources":["../../../src/components/VSelect/VSelect.tsx"],"sourcesContent":["// Styles\nimport './VSelect.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VCheckboxBtn } from '@/components/VCheckbox'\nimport { VChip } from '@/components/VChip'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VList, VListItem } from '@/components/VList'\nimport { VMenu } from '@/components/VMenu'\nimport { VTextField } from '@/components/VTextField'\n\n// Composables\nimport { makeItemsProps, useItems } from '@/composables/items'\nimport { makeTransitionProps } from '@/composables/transition'\nimport { useForwardRef } from '@/composables/forwardRef'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { IconValue } from '@/composables/icons'\n\n// Utility\nimport { computed, mergeProps, ref } from 'vue'\nimport { genericComponent, propsFactory, useRender, wrapInArray } from '@/util'\n\n// Types\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { InternalItem } from '@/composables/items'\nimport type { MakeSlots } from '@/util'\nimport type { PropType } from 'vue'\n\nexport const makeSelectProps = propsFactory({\n  chips: Boolean,\n  closableChips: Boolean,\n  eager: Boolean,\n  hideNoData: Boolean,\n  hideSelected: Boolean,\n  menu: Boolean,\n  menuIcon: {\n    type: IconValue,\n    default: '$dropdown',\n  },\n  menuProps: {\n    type: Object as PropType<VMenu['$props']>,\n  },\n  modelValue: {\n    type: null,\n    default: () => ([]),\n  },\n  multiple: Boolean,\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText',\n  },\n  openOnClear: Boolean,\n\n  ...makeItemsProps({ itemChildren: false }),\n}, 'select')\n\ntype Primitive = string | number | boolean | symbol\n\ntype Val <T, ReturnObject extends boolean> = T extends Primitive\n  ? T\n  : (ReturnObject extends true ? T : any)\n\ntype Value <T, ReturnObject extends boolean, Multiple extends boolean> =\n  Multiple extends true\n    ? Val<T, ReturnObject>[]\n    : Val<T, ReturnObject>\n\nexport const VSelect = genericComponent<new <\n  T,\n  ReturnObject extends boolean = false,\n  Multiple extends boolean = false,\n  V extends Value<T, ReturnObject, Multiple> = Value<T, ReturnObject, Multiple>\n>() => {\n  $props: {\n    items?: readonly T[]\n    returnObject?: ReturnObject\n    multiple?: Multiple\n    modelValue?: Readonly<V>\n    'onUpdate:modelValue'?: (val: V) => void\n  }\n  $slots: VInputSlots & VFieldSlots & MakeSlots<{\n    item: [{ item: T, index: number, props: Record<string, unknown> }]\n    chip: [{ item: T, index: number, props: Record<string, unknown> }]\n    selection: [{ item: T, index: number }]\n    'no-data': []\n  }>\n}>()({\n  name: 'VSelect',\n\n  props: {\n    ...makeSelectProps(),\n    ...makeTransitionProps({ transition: { component: VDialogTransition } }),\n  },\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n    'update:menu': (val: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const { t } = useLocale()\n    const vTextFieldRef = ref()\n    const menu = useProxiedModel(props, 'menu')\n    const { items, transformIn, transformOut } = useItems(props)\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      [],\n      v => transformIn(wrapInArray(v)),\n      v => {\n        const transformed = transformOut(v)\n        return props.multiple ? transformed : (transformed[0] ?? null)\n      }\n    )\n    const selections = computed(() => {\n      return model.value.map(v => {\n        return items.value.find(item => item.value === v.value) || v\n      })\n    })\n    const selected = computed(() => selections.value.map(selection => selection.props.value))\n\n    function onClear (e: MouseEvent) {\n      model.value = []\n\n      if (props.openOnClear) {\n        menu.value = true\n      }\n    }\n    function onClickControl () {\n      if (props.hideNoData && !items.value.length) return\n\n      menu.value = true\n    }\n    function onKeydown (e: KeyboardEvent) {\n      if (['Enter', 'ArrowDown', ' '].includes(e.key)) {\n        menu.value = true\n      }\n\n      if (['Escape', 'Tab'].includes(e.key)) {\n        menu.value = false\n      }\n    }\n    function select (item: InternalItem) {\n      if (props.multiple) {\n        const index = selected.value.findIndex(selection => selection === item.value)\n\n        if (index === -1) {\n          model.value = [...model.value, item]\n        } else {\n          const value = [...model.value]\n          value.splice(index, 1)\n          model.value = value\n        }\n      } else {\n        model.value = [item]\n        menu.value = false\n      }\n    }\n\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip)\n\n      return (\n        <VTextField\n          ref={ vTextFieldRef }\n          modelValue={ model.value.map(v => v.props.value).join(', ') }\n          onUpdate:modelValue={ v => { if (v == null) model.value = [] } }\n          validationValue={ props.modelValue }\n          class={[\n            'v-select',\n            {\n              'v-select--active-menu': menu.value,\n              'v-select--chips': !!props.chips,\n              [`v-select--${props.multiple ? 'multiple' : 'single'}`]: true,\n            },\n          ]}\n          appendInnerIcon={ props.menuIcon }\n          readonly\n          onClick:clear={ onClear }\n          onClick:input={ onClickControl }\n          onClick:control={ onClickControl }\n          onBlur={ () => menu.value = false }\n          onKeydown={ onKeydown }\n        >\n          {{\n            ...slots,\n            default: () => (\n              <>\n                <VMenu\n                  v-model={ menu.value }\n                  activator=\"parent\"\n                  contentClass=\"v-select__content\"\n                  eager={ props.eager }\n                  openOnClick={ false }\n                  closeOnContentClick={ false }\n                  transition={ props.transition }\n                  { ...props.menuProps }\n                >\n                  <VList\n                    selected={ selected.value }\n                    selectStrategy={ props.multiple ? 'independent' : 'single-independent' }\n                    onMousedown={ (e: MouseEvent) => e.preventDefault() }\n                  >\n                    { !items.value.length && !props.hideNoData && (slots['no-data']?.() ?? (\n                      <VListItem title={ t(props.noDataText) } />\n                    )) }\n\n                    { items.value.map((item, index) => slots.item?.({\n                      item,\n                      index,\n                      props: mergeProps(item.props, { onClick: () => select(item) }),\n                    }) ?? (\n                      <VListItem\n                        key={ index }\n                        { ...item.props }\n                        onClick={ () => select(item) }\n                      >\n                        {{\n                          prepend: ({ isSelected }) => props.multiple ? (\n                            <VCheckboxBtn modelValue={ isSelected } ripple={ false } />\n                          ) : undefined,\n                        }}\n                      </VListItem>\n                    )) }\n                  </VList>\n                </VMenu>\n\n                { selections.value.map((item, index) => {\n                  function onChipClose (e: Event) {\n                    e.stopPropagation()\n                    e.preventDefault()\n\n                    select(item)\n                  }\n\n                  const slotProps = {\n                    'onClick:close': onChipClose,\n                    modelValue: true,\n                  }\n\n                  return (\n                    <div key={ index } class=\"v-select__selection\">\n                      { hasChips ? (\n                        <VDefaultsProvider\n                          defaults={{\n                            VChip: {\n                              closable: props.closableChips,\n                              size: 'small',\n                              text: item.title,\n                            },\n                          }}\n                        >\n                          { slots.chip\n                            ? slots.chip({ item, index, props: slotProps })\n                            : (<VChip { ...slotProps } />)\n                          }\n                        </VDefaultsProvider>\n                      ) : (\n                        slots.selection\n                          ? slots.selection({ item, index })\n                          : (\n                            <span class=\"v-select__selection-text\">\n                              { item.title }\n                              { props.multiple && (index < selections.value.length - 1) && (\n                                <span class=\"v-select__selection-comma\">,</span>\n                              ) }\n                            </span>\n                          )\n                      )}\n                    </div>\n                  )\n                }) }\n              </>\n            ),\n          }}\n        </VTextField>\n      )\n    })\n\n    return useForwardRef({\n      menu,\n      select,\n    }, vTextFieldRef)\n  },\n})\n\nexport type VSelect = InstanceType<typeof VSelect>\n"]},"metadata":{},"sourceType":"module"}